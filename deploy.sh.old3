#!/bin/bash

set -e  # Exit on any unhandled error

# Load configuration file
ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"  # Ensure ROOT_DIR is absolute
CONFIG_FILE="$ROOT_DIR/deploy-config.json"

if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    exit 1
fi

# Function to validate configuration values
validate_config() {
    local key=$1
    local value=$(jq -r ".$key" "$CONFIG_FILE")

    if [[ -z "$value" || "$value" == "null" ]]; then
        echo "Error: Missing or empty value for '$key' in configuration file."
        exit 1
    fi

    echo "$value"
}

# Function to send Discord webhook messages
send_discord_message() {
    local message="$1"
    local webhook_key="$2"
    
    local webhooks=$(jq -r ".webhooks.$webhook_key[]" "$CONFIG_FILE" 2>/dev/null)
    for webhook in $webhooks; do
        curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$message\"}" "$webhook" >/dev/null 2>&1
    done
}

# **Rollback function (Moved Above handle_failure)**
rollback() {
    if [[ -n "$PREVIOUS_TARGET" ]]; then
        log "Rolling back to previous deployment: $PREVIOUS_TARGET"
        ln -sfn "$PREVIOUS_TARGET" "$ROOT_DIR/$PROD_SYMLINK"
        echo "$(date +'%Y-%m-%d %H:%M:%S') - Rolled back to $PREVIOUS_TARGET due to deployment failure." >> "$ROOT_DIR/.prod-app-log"
    fi

    # Delete failed deployment if enabled in config
    if [[ "$DELETE_FAILED_DEPLOY" == "true" ]]; then
        log "Deleting failed deployment directory: $DEPLOY_DIR"
        rm -rf "$DEPLOY_DIR"
    fi

    log "Deployment failed. Check logs for details."
    send_discord_message "**Deployment failed!** Rolled back to $PREVIOUS_TARGET" "on_error"
    exit 1
}

# **Function to handle failures (Now calls rollback correctly)**
handle_failure() {
    local error_message="$1"
    log "$error_message"
    send_discord_message "**Deployment failed!** $error_message" "on_error"
    rollback
}

# Extract and validate configuration values
DEPLOYMENT_PREFIX=$(validate_config "deployment_prefix")
REPO_URL=$(validate_config "repository_url")
DEPLOY_KEY=$(validate_config "deploy_key")
ENV_FILE=$(validate_config "env_file")
STORAGE_SYMLINK=$(validate_config "storage_symlink")
PROD_SYMLINK=$(validate_config "prod_symlink")
LOG_DIR=$(validate_config "log_dir")
MAX_LOGS=$(validate_config "max_logs")
DELETE_FAILED_DEPLOY=$(validate_config "delete_failed_deploy")  # New config option

# Ensure deploy key exists
if [[ ! -f "$DEPLOY_KEY" ]]; then
    handle_failure "Error: Deploy key '$DEPLOY_KEY' not found."
fi

# Generate Deployment Directory (Ensure absolute path)
TIMESTAMP=$(date +'%Y%m%d-%H%M')
DEPLOY_DIR="$ROOT_DIR/$DEPLOYMENT_PREFIX-$TIMESTAMP"
COUNT=1

# Ensure unique directory name
while [[ -d "$DEPLOY_DIR" ]]; do
    DEPLOY_DIR="${ROOT_DIR}/${DEPLOYMENT_PREFIX}-${TIMESTAMP}-$COUNT"
    ((COUNT++))
done

# Create deployment directory
mkdir -p "$DEPLOY_DIR"

# Prepare log directory (Use absolute path)
mkdir -p "$ROOT_DIR/$LOG_DIR"
LOG_FILE="$ROOT_DIR/$LOG_DIR/$(basename "$DEPLOY_DIR").txt"

# Function to log messages (Ensuring absolute path)
log() {
    if [[ ! -f "$LOG_FILE" ]]; then
        touch "$LOG_FILE"
    fi
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $*" | tee -a "$LOG_FILE"
}

# Backup the previous production target before updating
PREVIOUS_TARGET=""
PROD_LOG_FILE="$ROOT_DIR/.prod-app-log"
PREV_TARGET_FILE="$ROOT_DIR/.previous-prod-target"

# Ensure the log files exist
touch "$PROD_LOG_FILE"
touch "$PREV_TARGET_FILE"

if [[ -L "$ROOT_DIR/$PROD_SYMLINK" ]]; then
    PREVIOUS_TARGET=$(readlink "$ROOT_DIR/$PROD_SYMLINK")
    
    log "Previous deployment target: $PREVIOUS_TARGET"
    
    # Append previous target to .prod-app-log with timestamp
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $PREVIOUS_TARGET" >> "$PROD_LOG_FILE"
    
    # Overwrite .previous-prod-target with the last deployment path
    echo "$PREVIOUS_TARGET" > "$PREV_TARGET_FILE"
fi

# Send start notification
send_discord_message "**Deployment started:** Deploying to $DEPLOY_DIR" "on_start"

log "Starting deployment in directory: $DEPLOY_DIR"

# Clone repository using deploy key
log "Cloning repository using deploy key: $REPO_URL"
GIT_SSH_COMMAND="ssh -i $DEPLOY_KEY -o StrictHostKeyChecking=no" git clone "$REPO_URL" "$DEPLOY_DIR" 2>&1 | tee -a "$LOG_FILE"
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    handle_failure "Failed to clone repository from $REPO_URL"
fi

# Change to deployment directory
cd "$DEPLOY_DIR"

# Run Laravel installation commands (Exit & Notify if they fail)
log "Running composer install"
if ! command -v composer >/dev/null; then
    handle_failure "composer: command not found."
fi
if ! composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader | tee -a "$LOG_FILE"; then
    handle_failure "composer install encountered an error."
fi

log "Running npm install"
if ! command -v npm >/dev/null; then
    handle_failure "npm: command not found."
fi
if ! npm install | tee -a "$LOG_FILE"; then
    handle_failure "npm install encountered an error."
fi

log "Running php artisan down"
if ! command -v php >/dev/null; then
    handle_failure "php: command not found."
fi
if ! php artisan down | tee -a "$LOG_FILE"; then
    handle_failure "artisan: could not open input file."
fi

# Set rollback on any failure
trap rollback ERR

# Run optimization and migration commands (Rollback on failure)
log "Running php artisan clear-compiled"
php artisan clear-compiled | tee -a "$LOG_FILE" || rollback

log "Running php artisan optimize"
php artisan optimize | tee -a "$LOG_FILE" || rollback

log "Running npm run prod"
npm run prod | tee -a "$LOG_FILE" || rollback

log "Running php artisan migrate --force"
php artisan migrate --force | tee -a "$LOG_FILE" || rollback

# Bring application back online (Rollback if this fails)
log "Running php artisan up"
php artisan up | tee -a "$LOG_FILE" || rollback

# Remove rollback trap on success
trap - ERR

# Send success notification
send_discord_message "**Deployment completed successfully:** Now running $DEPLOY_DIR" "on_success"

log "Deployment completed successfully!"
exit 0
